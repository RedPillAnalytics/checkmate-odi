plugins {
   id 'groovy'
   id 'java-gradle-plugin'
   id "com.github.johnrengelman.shadow" version "5.2.0"
   id "com.gradle.plugin-publish" version "0.10.1"
   id "pl.allegro.tech.build.axion-release" version "1.10.3"
   id "com.github.breadmoirai.github-release" version "2.2.10"
   id 'org.unbroken-dome.test-sets' version '2.2.1'
   id "com.avast.gradle.docker-compose" version "0.10.7"
   id "com.github.ben-manes.versions" version "0.27.0"
   id "com.redpillanalytics.gradle-analytics" version "1.3.0"
   id 'com.adarshr.test-logger' version '2.0.0'
   id 'build-dashboard'
}

// send analytics
analytics {
   organization = 'Red Pill Analytics'
   gcs {
      devops {
         prefix = 'rpa-gradle-analytics'
      }
   }
}

scmVersion {
   tag {
      prefix = 'v'
      versionSeparator = ''
   }
   ignoreUncommittedChanges = true
}

//set Gradle version to SCM Version
allprojects {
   project.version = scmVersion.version
}

// Default artifact naming.
group = 'com.redpillanalytics'
ext.pluginName = 'checkmate.odi'


gradlePlugin {
   plugins {
      checkmateOdi {
         id = "com.redpillanalytics.${pluginName}"
         implementationClass = 'com.redpillanalytics.odi.gradle.OdiPlugin'
      }
   }
}

pluginBundle {

   description = "A CI/CD framework for Oracle Data Integrator."
   website = "https://github.com/RedPillAnalytics/${rootProject.name}/"
   vcsUrl = "https://github.com/RedPillAnalytics/${rootProject.name}/"

   plugins {

      checkmateOdi {
         displayName = pluginName
         tags = ['oracle', 'data-integration', 'etl']
         version = project.version
      }
   }
}

FilenameFilter filter = { dir, filename -> filename.contains("${rootProject.name}-${project.version}") }

githubRelease {
   token = githubToken
   owner = 'RedPillAnalytics'
   repo = rootProject.name
   tagName = "v${version}"
   releaseAssets = [jar.destinationDir.listFiles(filter)]
}

dependencies {

   compile gradleApi()
   compile localGroovy()

   compile group: 'org.slf4j', name: 'slf4j-simple', version: '+'

   // Gradle Properties
   // It also has the Common library in it, thus the dependency here
   compile "gradle.plugin.com.redpillanalytics:gradle-properties:0.1.5"

   compile fileTree(dir: 'libs', include: '*.jar')
   compile 'org.xmlunit:xmlunit-core:2.6.3'
   // testing
   testCompile 'org.spockframework:spock-core:1.3-RC1-groovy-2.5'
}

// Default artifact naming.
group = 'com.redpillanalytics'

jar.enabled = false
shadowJar {
   classifier = ''
   zip64 true
}

tasks.build.dependsOn tasks.shadowJar

repositories {
   jcenter()
   maven {
      url "https://plugins.gradle.org/m2/"
   }
}

testSets {
   onlineExportTest
   onlineImportTest
   onlineWaitTest
}

task cleanJunit(type: Delete) {
   delete getTestResultsDir()
}

task cleanLibs(type: Delete) {
   delete getLibsDir()
}

def versionUrl = "${docBucket}/${rootProject.name}/${version}"
task publishVersionDocs(type: Exec) {
   description = 'Publish version Groovydocs to S3.'
   group = 'publishing'
   executable 'aws'
   args 's3', 'sync', groovydoc.destinationDir.getPath(), "s3://${versionUrl}"
   doLast {
      logger.warn "\nVersion docs: https://s3.amazonaws.com/${versionUrl}/index.html"
   }
   dependsOn groovydoc
}

def latestUrl = "${docBucket}/${rootProject.name}/latest"
task publishLatestDocs(type: Exec) {
   description = 'Publish latest Groovydocs to S3.'
   group = 'publishing'
   executable 'aws'
   args 's3', 'sync', groovydoc.destinationDir.getPath(), "s3://${latestUrl}"
   doLast {
      logger.warn "\nLatest docs: https://s3.amazonaws.com/${latestUrl}/index.html"
   }
   dependsOn groovydoc
}

task runAllTests {
   description 'Run all defined tests.'
   group 'verification'
}

tasks.withType(Test) {
   runAllTests.dependsOn it
   failFast true
   ignoreFailures true
   systemProperty 'projectDir', temporaryDir
   systemProperty 'projectBase', temporaryDir
   systemProperty 'analyticsVersion', analyticsVersion
   testLogging.showStandardStreams true
   systemProperty 'odiPassword', odiPassword
   systemProperty 'masterPassword', masterPassword
   systemProperty 'masterUrl', masterUrl
}

tasks.onlineExportTest.mustRunAfter tasks.onlineImportTest
tasks.onlineImportTest.mustRunAfter tasks.onlineWaitTest
tasks.onlineExportTest.mustRunAfter tasks.onlineWaitTest

// create a publish task
task publish {
   description 'Custom publish task.'
   group 'publishing'
   dependsOn tasks.publishPlugins, tasks.publishVersionDocs, tasks.publishLatestDocs, tasks.githubRelease, tasks.build
}

tasks.githubRelease.mustRunAfter tasks.publishPlugins, tasks.build
