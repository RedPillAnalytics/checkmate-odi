import com.redpillanalytics.aws.tasks.S3UploadSyncTask
import com.redpillanalytics.aws.tasks.S3DownloadSyncTask

plugins {
   id "com.gradle.plugin-publish" version "0.10.1"
   id "pl.allegro.tech.build.axion-release" version "1.10.1"
   id "com.github.breadmoirai.github-release" version "2.2.8"
   id 'groovy'
   id 'java-gradle-plugin'
   id 'org.unbroken-dome.test-sets' version '2.1.1'
   id "com.github.ben-manes.versions" version "0.21.0"
   id 'com.adarshr.test-logger' version '1.6.0'
   id "com.redpillanalytics.gradle-analytics" version "1.2.3"
   id "com.redpillanalytics.gradle-aws" version "0.1.5"
   id "com.github.johnrengelman.shadow" version "5.1.0"
//   id "com.redpillanalytics.checkmate.odi.api" version "0.1.16"
}

// send analytics
analytics {
   organization = 'Red Pill Analytics'
   sinks {
      pubsub
      s3 {
         prefix = 'rpa-gradle-analytics'
      }
   }
}

scmVersion {

   tag {
      prefix = 'v'
      versionSeparator = ''
   }
   ignoreUncommittedChanges = true
}

//set Gradle version to SCM Version
allprojects {
   project.version = scmVersion.version
}

// Default artifact naming.
group = 'com.redpillanalytics'
ext.pluginName = 'checkmate.odi'


gradlePlugin {
   plugins {
      checkmateOdi {
         id = "com.redpillanalytics.${pluginName}"
         implementationClass = 'com.redpillanalytics.odi.gradle.OdiPlugin'
      }
   }
}

pluginBundle {

   description = "A CI/CD framework for Oracle Data Integrator."
   website = "https://github.com/RedPillAnalytics/${rootProject.name}/"
   vcsUrl = "https://github.com/RedPillAnalytics/${rootProject.name}/"

   plugins {

      checkmateOdi {
         displayName = pluginName
         tags = ['oracle', 'data-integration', 'etl']
         version = project.version
      }
   }
}

FilenameFilter filter = { dir, filename -> filename.contains("${rootProject.name}-${project.version}") }

githubRelease {
   token = githubToken
   owner = 'RedPillAnalytics'
   repo = rootProject.name
   tagName = "v${version}"
   releaseAssets = [jar.destinationDir.listFiles(filter)]
}

dependencies {

   compile gradleApi()
   compile localGroovy()

   compile group: 'org.slf4j', name: 'slf4j-simple', version: '+'

   // Gradle Analytics plugin
   // It also has the Common library in it, thus the dependency here
   compile "gradle.plugin.com.redpillanalytics:gradle-analytics:+"

   testCompile 'org.spockframework:spock-core:1.2-groovy-2.5'

   // Plugin so classes can be used
   //implementation "gradle.plugin.com.redpillanalytics:odi-api:0.1.14"
   //implementation fileTree(dir: project.odiApi.libsDir, include: '*.jar')
   compile fileTree(dir: 'libs', include: '*.jar')
   compile 'org.xmlunit:xmlunit-core:2.6.3'
}

// Default artifact naming.
group = 'com.redpillanalytics'

jar.enabled = false
shadowJar { classifier = '' }
tasks.build.dependsOn tasks.shadowJar

repositories {
   jcenter()
   maven {
      url "https://plugins.gradle.org/m2/"
   }
}

// Options for all tests
tasks.withType(Test) {
   testLogging.showStandardStreams true
   systemProperty 'projectDir', temporaryDir
   systemProperty 'odiPassword', odiPassword
   systemProperty 'masterPassword', masterPassword
   systemProperty 'masterUrl', masterUrl
}

testSets {
   onlineExportTest
   onlineImportTest
}

task cleanJunit(type: Delete) {
   delete getTestResultsDir()
}

task cleanLibs(type: Delete) {
   delete getLibsDir()
}

onlineExportTest.mustRunAfter onlineImportTest

ext.docsBucket = 'documentation.redpillanalytics.com'
ext.resourceBucket = 'rpa-build-resources'

task publishVersionDocs(type: S3UploadSyncTask) {

   description = 'Upload version Groovydocs to s3.'
   group = 'documentation'

   bucketName docsBucket
   filePath groovydoc.destinationDir.getPath()
   keyName "${rootProject.name}/${version}"

   dependsOn groovydoc
}

task publishLatestDocs(type: S3UploadSyncTask) {

   description = 'Upload latest Groovydocs to s3.'
   group = 'documentation'

   bucketName docsBucket
   filePath groovydoc.destinationDir.getPath()
   keyName "${rootProject.name}/latest"

   dependsOn groovydoc
}

publishPlugins.dependsOn publishVersionDocs
publishVersionDocs.dependsOn publishLatestDocs

task copyBuildResources(type: S3DownloadSyncTask) {
   description 'Copy build resource files from S3.'
   group 'build'
   bucketName resourceBucket
   keyName 'gradle'
   filePath gradle.getGradleUserHomeDir().toString()
   doFirst {
      logger.warn "gradle home: ${gradle.getGradleUserHomeDir().toString()}"
   }
}

task runAllTests {
   description = 'Run all defined tests.'
   group = 'verification'
   dependsOn onlineExportTest, onlineImportTest
}

//tasks.build.dependsOn tasks.extractApi
//tasks.compileGroovy.mustRunAfter tasks.extractApi