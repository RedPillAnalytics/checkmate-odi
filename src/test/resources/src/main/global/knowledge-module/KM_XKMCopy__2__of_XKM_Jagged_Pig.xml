<?xml version="1.0" encoding="ISO-8859-1"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.08" IsLegacyIdCompatible="false" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="Roh9RNQWAib3jigjwe0JsEBleuy7ZJmc6otO4TQpP0g=" keyVect="i8aVAwUSkUn+Bdd/0aPxJg==" exportKeySalt="662f303a-a4fa-424f-b112-577e1d2f40e6" containsCipherText="false"/>
<Object class="com.sunopsis.dwg.dbobj.SnpTrt">
		<Field name="CleanupOnError" type="java.lang.String">null</Field>
	<Field name="CompType" type="java.lang.String"><![CDATA[Jagged]]></Field>
	<Field name="DelegateClass" type="java.lang.String"><![CDATA[XKM_Jagged_Pig]]></Field>
	<Field name="DelegateScript" type="java.lang.String"><![CDATA[
       
       import oracle.odi.domain.mapping.*
       import oracle.odi.domain.mapping.component.*
       import oracle.odi.domain.mapping.generator.*
       import oracle.odi.domain.mapping.physical.*
       import oracle.odi.domain.mapping.expression.*
       import oracle.odi.mapping.generation.*
	         
      
       public class XKM_Jagged_Pig extends GroovyComponentGeneratorDelegateBase {

            protected IMapComponent component;
            protected MapPhysicalNode physicalNode;
			protected IGeneratorContext generatorContext; 
       	    protected List<AbstractSyntaxTree> upstreamASTList;
           
            protected boolean hasId
            
            protected mBinding = null;

            public void setBinding(Binding binding) {
                super.setBinding(binding);
                mBinding = binding;

                Map variables = binding.getVariables();
				println ""; println "In main class"; println ""      
      
                if (variables.containsKey("component")) {
                    component =  mBinding.getVariable("component");
                }
                if (variables.containsKey("physicalNode")) {
                    physicalNode =  mBinding.getVariable("physicalNode");
                }
                if (variables.containsKey("generatorContext")) {
                    generatorContext =  mBinding.getVariable("generatorContext");
                }
                if (variables.containsKey("upstreamASTList")) {
                    upstreamASTList =  mBinding.getVariable("upstreamASTList");
                }             				
            }

       
       	   //==================================
      	
           public XKM_Jagged_Pig () {} 
      	
           //==================================
            
        	
           AbstractSyntaxTree SELECT(PigScript inputScript) { 
      	
               println "Input Script : "
               println "Size : " + inputScript.getChildren().size() 
      	       inputScript.getChildren().each { println it.getText() }     
      	       println "" 
      		   println physicalNode.getTemplateUtils().getTemplateText(PigLoadCmd)      		         		              
			   println ""
      		   println inputScript.getLastCommand().getType() 
			   println inputScript.getLastCommand().getText() 

       		   def inScriptOutSchema = inputScript.getOutputSchema() 
       		   def inScriptOutFields = inScriptOutSchema.getFields() 
       		   def inScriptInSchemas = inputScript.getInputSchemas()   

      		   println inScriptOutSchema.getName()
			   println inScriptOutSchema.getSchemaDefinition(true)      
       		   inScriptOutFields.each { println it.getName() + " : " + it.getType()}
       		   println inScriptOutSchema.getConnectorPoint() 
                 
      		   println inScriptInSchemas 
       		   println inputScript.getInputConnectorPoint(0)

                     
			   def idAttr = findInputAttribute("ID").getExpression().getReferencedObjects()[0].getName()
      		   def keyAttr = findInputAttribute("KEY").getExpression().getReferencedObjects()[0].getName()
      		   def valueAttr = findInputAttribute("VALUE").getExpression().getReferencedObjects()[0].getName()    
		      
      		   hasId = isIDConnected()
               mBinding.setVariable( "hasId",  hasId )
      	
       		   def nodeCP = physicalNode.getLogicalConnectorPoint()
       		   println nodeCP.getName()        
            
			   PigScript outputScript = new PigScript(physicalNode.getTemplateUtils(), null) 
               outputScript.addChild(inputScript)
      
			   PigCommand jaggedCmd = new PigCallScriptCmd(physicalNode.getTemplateUtils(), physicalNode)
      		          
               def outSchema = new PigSchema(outputScript.getInputScripts()[0], physicalNode.getName());

      		   def outAttributes = getOutputAttributes(nodeCP.getName())              	
			   def outFields = []
      		   def RowId
      		   def uniqueKeys = []       
               outAttributes.each {
       				if (it.getBooleanPropertyValue("Record Id")) {
      				   RowId = it
      				} else {		
       				   def fld = new PigField(outSchema, PigField.PigFieldKind.valueOf("SCALAR"))   
      			       fld.setName(it.getName())
       				   fld.setType("chararray")
					   outFields.add(fld)
      			    }
					if (it.getBooleanPropertyValue("Unique Index")) { uniqueKeys.add(it.getName()) }  
       		   }
       		   outSchema.setFields(outFields)       
      
			   outputScript.setOutputSchema(outSchema)       
          
 			   def filterStr = "${outSchema.getName()} = filter ${inScriptOutSchema.getName()} by ${idAttr} != '';\n"        
			   
      		   def trimStr = "${outSchema.getName()} = foreach ${outSchema.getName()}  generate "  
               inScriptOutFields.each { trimStr = trimStr + "TRIM(${it.getName()}) as ${it.getName()}, " }  
       		   trimStr = trimStr.substring(0, trimStr.size()-2) + ";\n"   
			   
      		   def grpRel = "${outSchema.getName()}_grp"       
       		   def grpStr =  "${grpRel} = group ${outSchema.getName()} by ${idAttr};\n"
        
        	   def jaggedStr =  "${outSchema.getName()} = foreach ${grpRel} {\n" 
       		   outAttributes.each {
				 if (!it.getBooleanPropertyValue("Record Id")) {     
       			    jaggedStr = jaggedStr + "   ${it.getName()}  = filter ${outSchema.getName()} by ${keyAttr} == '${it.getName()}';\n"
                 }      
      		   } 
       		   jaggedStr = jaggedStr + "generate\n"
			   if (RowId != null) { jaggedStr = jaggedStr + "   flatten(group) as ${RowId.getName()},\n" }      
			   outAttributes.each {
				 if (!it.getBooleanPropertyValue("Record Id")) {       
				    def defaultValue = "''"  
       		        def attrDef = it.getStringPropertyValue("Default")
      	            if (attrDef != null && attrDef != "") { defaultValue = "'${attrDef}'" } 
       			    if (!it.getBooleanPropertyValue("Required") && !it.getBooleanPropertyValue("Unique Index")) {    
				       jaggedStr = jaggedStr + "   flatten((IsEmpty(${it.getName()}.${valueAttr}) ? {(${defaultValue})} : ${it.getName()}.${valueAttr})) as ${it.getName()},\n"
					} else {
       				   jaggedStr = jaggedStr + "   flatten(${it.getName()}.${valueAttr}) as ${it.getName()},\n"
       			    }    
				 }      
		 	   } 
       		   jaggedStr = jaggedStr.substring(0, jaggedStr.size()-2) + ";\n"
       		   jaggedStr = jaggedStr + "};"
      
			   def consolidateStr = "" 
      	 	   
      	       def isConsolidate = nodeCP.getBooleanPropertyValue("Consolidate Data")
    
			   if (isConsolidate && uniqueKeys.size() > 0) {
      	          def uk = ""
                  uniqueKeys.each {uk = uk + it + ","}
      			  uk = uk.substring(0, uk.size()-1)
       			  def grpConsRel = "${outSchema.getName()}_cons_grp"
      			  consolidateStr =  "\n${grpConsRel} = group ${outSchema.getName()} by (${uk});\n" 
				  consolidateStr = consolidateStr + "${outSchema.getName()} = foreach  ${grpConsRel} {\n"
       			  consolidateStr = consolidateStr + "top_rec = LIMIT ${outSchema.getName()} 1;\n"
				  consolidateStr = consolidateStr + "generate flatten(top_rec);\n"
       			  consolidateStr = consolidateStr + "};"    
       		   } 
 			          
      		   jaggedCmd.setCustomTemplate(filterStr + trimStr + grpStr + jaggedStr + consolidateStr)
            	      
			   outputScript.addChild(jaggedCmd)          	
                  
      		   println ""
			   println "Output Script : "       
			   println "Size children : " + outputScript.getChildren().size()
			   outputScript.getChildren().each { println it.getClass().getName() + " : " + it.getText() }      
			   println "" 
               println "Size commands : " + outputScript.getCommands().size()    
               outputScript.getCommands().each {println it.getType() + " : " + it.getText()} 
       		   println ""
               println physicalNode.getTemplateUtils().getTemplateText(PigCallScriptCmd) 
			   println ""              
               println "Output schema : "
       		   println outSchema
			   println outSchema.getSchemaDefinition(true)
               println outSchema.getConnectorPoint()      
               println ""
       		   println "Input schema : "
               println outputScript.getInputSchemas()
			   println outputScript.getInputScripts()  
               println ""
      		   println jaggedCmd.getText() 
      	
      		   component.getOutputConnectorPoints().each {currentCP -> } 
                                   	         
       		   return outputScript      
         	
           }          
            
           String getOption( String optionName ) {
                def option = null;
                if ( physicalNode.isXKMNode() ) {
                    option = physicalNode.getOptionValue(ProcessingType.SOURCE, optionName)
                    if ( option != null ) {
                        option = option.getOptionValueString()
      				}
                }
                if ( option != null ) { option = option.trim() } else { option = "" }
                return option
           }

           String getOptionOrDefault( String optionName, String defaultValue ) {
                def option = getOption(optionName);
                if ( option=="" ) option = defaultValue
                return option
           }
                   	                        

		   def findInputAttribute (String attributeName) {               
       		   return component.getInputConnectorPoint(0).findAttribute(attributeName)                  
           }
      	       
		   def getOutputAttributes (String connectorPoint) {
      		   def result = []
               component.getOutputConnectorPoint(connectorPoint).getAttributes().each {
                   result.add(it)
       		   }
       		   return result                  
           }       	
            
      	   def getSourceComponent() {
			   def comp      
      		   physicalNode.getUpstreamConnectedNodes().each {
				 comp =  it.getLogicalComponent()                
      		   }
       		   return comp    
           } 
      	      	                 
		   def getSourceFileDelimiter() {

       	 	   String text = ""    
      		   physicalNode.getUpstreamConnectedNodes().each {
				 def delimiter =  it.getLogicalComponent().getBoundObject().getFileDescriptor().getFieldSeparator()
  
				 def arr = delimiter.replace("\\","").split("u") 	
				 arr[1..arr.size()-1].each {
    				int hexVal = Integer.parseInt(it, 16);
    				text += (char)hexVal;
				 }         
      		   }                    
       		   return text 			         
           }
           	       		   	 	
		   boolean isIDConnected () {
		   	   def attrID = component.findInputAttribute("ID")	
               if (attrID != null && attrID.getExpression() != null) {
		   	 	  return true
		   	   } else {
		   	 	  return false
		   	   }		   	 		   	 			   	 	
		   }                   	
      }

      
      
    ]]></Field>
	<Field name="ExpectedAstClass" type="java.lang.String">null</Field>
	<Field name="ExtVersion" type="java.lang.String">null</Field>
	<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2019-10-25 14:40:05.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[2d90dd29-bcfb-47e0-ad61-754fac368ed7]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[U]]></Field>
	<Field name="IndExcludeExUnitBegin" type="java.lang.String">null</Field>
	<Field name="IndExcludeExUnitEnd" type="java.lang.String">null</Field>
	<Field name="IndExcludeExUnitMain" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapBegin" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapCleanup" type="java.lang.String">null</Field>
	<Field name="IndExcludeMapEnd" type="java.lang.String">null</Field>
	<Field name="IndGenerateLoad" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndIsHidden" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndJrnMethod" type="java.lang.String"><![CDATA[S]]></Field>
	<Field name="IndSuppSetBased" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IntgType" type="java.lang.String"><![CDATA[SELECT]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="IsConcurrent" type="java.lang.String">null</Field>
	<Field name="IsSeeded" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="IBaseCompKm" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IProject" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScBaseTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScOrigTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="IScTrt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITrt" type="com.sunopsis.sql.DbInt"><![CDATA[1636]]></Field>
	<Field name="ITxtDelTxt" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ITxtTrtTxt" type="com.sunopsis.sql.DbInt"><![CDATA[17413]]></Field>
	<Field name="KimMultiDserver" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KmDefault" type="java.lang.String"><![CDATA[0]]></Field>
	<Field name="KmLang" type="java.lang.String"><![CDATA[PIGLATIN]]></Field>
	<Field name="KmSrcLang" type="java.lang.String">null</Field>
	<Field name="KmSrcTechno" type="java.lang.String">null</Field>
	<Field name="KmTechno" type="java.lang.String"><![CDATA[PIG]]></Field>
	<Field name="KmVersion" type="java.lang.String">null</Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2019-10-25 14:40:05.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="LkmType" type="java.lang.String"><![CDATA[N]]></Field>
	<Field name="LChecksum" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LCode" type="java.lang.String">null</Field>
	<Field name="OggJkm" type="java.lang.String">null</Field>
	<Field name="OrdFolder" type="com.sunopsis.sql.DbInt"><![CDATA[null]]></Field>
	<Field name="ProcType" type="java.lang.String"><![CDATA[S]]></Field>
	<Field name="ProdAstType" type="java.lang.String"><![CDATA[oracle.odi.mapping.generation.PigScript]]></Field>
	<Field name="RepGuid" type="java.lang.String">null</Field>
	<Field name="RepVersion" type="java.lang.String">null</Field>
	<Field name="ScriptPath" type="java.lang.String">null</Field>
	<Field name="ScOrigTrtTag" type="java.lang.String">null</Field>
	<Field name="Subtype" type="java.lang.String"><![CDATA[*]]></Field>
	<Field name="TrtName" type="java.lang.String"><![CDATA[Copy (2) of XKM Jagged Pig]]></Field>
	<Field name="TrtType" type="java.lang.String"><![CDATA[CK]]></Field>
	<Field name="VariableDefs" type="java.lang.String">null</Field>
	<Field name="VLastDate" type="java.sql.Timestamp">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTxtHeader">
		<Field name="Enc" type="java.lang.String">null</Field>
	<Field name="EncKey" type="java.lang.String">null</Field>
 <Field name="EncKeyVect" type="java.lang.String">null</Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[14b971af-a3f3-4b36-81be-ec0b181ba876]]></Field>
	<Field name="ITxt" type="com.sunopsis.sql.DbInt"><![CDATA[17413]]></Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[107]]></Field>
	<Field name="SqlIndGrp" type="java.lang.String"><![CDATA[0]]></Field>
 <Field name="Txt" type="java.lang.String"><![CDATA[COMPONENT NAME:    XKM Jagged Pig
AUTHOR:            Oracle
COMPONENT VERSION: 1
COMPATIBILITY:     ODI 12.1.3.0.1 and above
DESCRIPTION:
XKM Jagged Pig component KM processes unstructured data using meta pivoting in Pig Latin language. 
Source data, represented as key-value free format, will be transformed into more structured entities in order to be loaded into database tables or file structures. 
Jagged component has one input group and one or multiple output groups based on the configuration of the component. 
Input group is connected to a source component, which has e key-value or id-key-value structure. 
Output groups are connected to the target components where data is stored in more structured way, i.e. keys become column names and values are stored as table rows. 
Jagged KM is parsing the source data and is looking for key data matching the output group attributes. Once the relevant keys are identified the corresponding data is stored into a row. 
In case of key-value source each incoming record is delimited by a key marked as End of Data Indicator.  
In case of id-key-value source incoming records are delimited by a new value of the sequence defined as id. 
Target records can be consolidated by removing duplicates based on Unique Index attribute property. 
Some attributes can be labelled as required, meaning no new record is stored if any of the required keys is missing. 
Default values can be defined for some missing keys.]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpOrigTxt">
		<Field name="GlobalId" type="java.lang.String">null</Field>
	<Field name="ITxtOrig" type="com.sunopsis.sql.DbInt"><![CDATA[107]]></Field>
	<Field name="OrigineName" type="java.lang.String"><![CDATA[Edit Command]]></Field>
	<Field name="SnpsCol" type="java.lang.String"><![CDATA[I_TXT_TRT_TXT]]></Field>
	<Field name="SnpsTable" type="java.lang.String"><![CDATA[SNP_TRT]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_TXTHEADER.17413]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[14b971af-a3f3-4b36-81be-ec0b181ba876]]></Field>
 <Field name="RefObjFQName" type="java.lang.String">null</Field>
 <Field name="RefObjFQType" type="java.lang.String">null</Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.08]]></Field>
</Object>
</SunopsisExport>
