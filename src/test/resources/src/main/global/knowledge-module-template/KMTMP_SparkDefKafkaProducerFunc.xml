<?xml version="1.0" encoding="ISO-8859-1"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.09" OdiVersion="12.2.1" IsLegacyIdCompatible="false" IsExportWithParents="true" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="QZ3dmluM8l2GgxdcxIY5kRvi6R+an7ZMClNCGhRCqzA=" keyVect="rChjnG6mXded7CdPnqd9pg==" exportKeySalt="a1a9e1c1-35fa-4a96-88a5-74d77d831870" containsCipherText="false"/>
<SmartExportList materializeShortcut="false" >
   <Include><![CDATA[SnpKmTemplate#114]]></Include>
</SmartExportList>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplate">
		<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2020-04-17 19:45:19.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUNOPSIS_INSTALL]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[fa46e35c-2d00-11e6-940e-00163e1ffd72]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="IndIsSeeded" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLangTrans" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndReplNl" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[3]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[114]]></Field>
	<Field name="LangName" type="java.lang.String"><![CDATA[PYTHON]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2020-04-17 21:01:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="Name" type="java.lang.String"><![CDATA[SparkDefKafkaProducerFunc]]></Field>
	<Field name="TechnoName" type="java.lang.String"><![CDATA[SPARK_PYTHON]]></Field>
	<Field name="TemplateText" type="java.lang.String"><![CDATA[
{# IF ($[STORAGE_FORMAT] == 'JSON' OR $[STORAGE_FORMAT] == 'AVRO') #}
{# IF ($[DF_INFER_SCHEMA] == 'false') #}
schema = StructType([{# FOR ($[TGT_SCHEMA_TYPES]) IN ($[TGT_SCHEMA_TYPE]) SEP = ',
' #}
  StructField($[TGT_SCHEMA_TYPE], True) {# ENDFOR #}])
{# ENDIF #}
{# ENDIF #}

def internalSaveRDDtoKafka(t, rdd):
  print("========= %s, %s =========save to Kafka" % (type(rdd).__name__, str(t)))
  if not rdd.isEmpty():
    print("Some rows")
    props=rdd.context._gateway.jvm.java.util.Properties()
    props.put("bootstrap.servers", "$[BOOTSTRAP_SERVERS]")
    props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer")
    props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer")
    <?
    ds_props = odiRef.getDataServerPropertiesFromLSchema("$[TGT_SCHEMA]");
    props_str = "";
    for ( Map.Entry p : ds_props.entrySet() ) {
      if(!p.getKey().equals("metadata.broker.list")){
        new_prop = "props.put(" + odiRef.getQuotedString(p.getKey()) + ", " + odiRef.getQuotedString(p.getValue()) + ")" + (char)10;
        props_str = props_str + ((props_str.length() > 0)? "    " : "") + new_prop;
      }
    }
    ?>
    <?=props_str?>
    producer = rdd.context._gateway.jvm.org.apache.kafka.clients.producer.KafkaProducer(props)

{# IF ($[STORAGE_FORMAT] == 'JSON' OR $[STORAGE_FORMAT] == 'AVRO') #}
    sqlctx = getSqlContextInstance(rdd.context)

{# IF ($[DF_INFER_SCHEMA] == 'false') #}
    df = sqlctx.createDataFrame(rdd, schema)
{# ELSE #}
    rdd = rdd.map(lambda row : Row(**row) if isinstance(row,dict) else row)
{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    for line in rdd.collect() :
      print line
{# ENDIF #}
{# IF ($[DF_SAMPLING_RATIO] == '0') #}
    df = sqlctx.createDataFrame(rdd)
{# ELSE #}
    df = sqlctx.createDataFrame(rdd, None, $[DF_SAMPLING_RATIO])
{# ENDIF #}
{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print("========= %s =========" % type(df).__name__)
    df.show()
    df.printSchema()
{# ENDIF #}
    colNames = [{# FOR ($[TGT_COLUMN_NAMES]) IN ($[TGT_COLUMN_NAME]) SEP = ','#}'$[TGT_COLUMN_NAME]'{# ENDFOR #}]
    df = df.select(*colNames)
{# ENDIF #}

{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    print('========= {0} : {1} ========='.format (rdd.name(), type(df).__name__))
    df.show()
    df.printSchema()
{# ENDIF #}

    rdd = df.toJSON()
{# ENDIF #}

{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
    for line in rdd.collect():
      print line.encode('utf8')
{# ENDIF #}

{# IF ($[STORAGE_FORMAT] == 'AVRO') #}
    rdd = rdd.map(lambda v: serializeToAVRO(v))
{# ENDIF #}
    for line in rdd.collect():
      record=sc._gateway.jvm.org.apache.kafka.clients.producer.ProducerRecord("$[DIRECTORY]",line.encode('utf8'))
      producer.send(record)

   ]]></Field>
	<Field name="TemplateVersion" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[a2fbdd90-bfb1-4218-93af-67484b8ab828]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[112]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[114]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[5ec53775-ad38-4bf8-b45f-2e71047d5fd1]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[113]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[114]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.112]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46e316-2d00-11e6-940c-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkStoreCmd]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[13]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.114]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46e35c-2d00-11e6-940e-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkDefKafkaProducerFunc]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[25]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.113]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46e334-2d00-11e6-940d-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkStoreCmdStreaming]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[22]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[3]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.09]]></Field>
</Object>
</SunopsisExport>
