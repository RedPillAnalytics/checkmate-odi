<?xml version="1.0" encoding="ISO-8859-1"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.09" OdiVersion="12.2.1" IsLegacyIdCompatible="false" IsExportWithParents="true" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="M/RVUVL2wfTfPCIMQ7PYLnJkIz+yw2ERJJgpR4wa05w=" keyVect="v2hp0NaZP4fAFWGEXBfbRQ==" exportKeySalt="57c8488f-c6e1-4e0c-98ff-870cac72f34e" containsCipherText="false"/>
<SmartExportList materializeShortcut="false" >
   <Include><![CDATA[SnpKmTemplate#104]]></Include>
</SmartExportList>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplate">
		<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2020-04-17 19:45:20.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUNOPSIS_INSTALL]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[5ef0f860-f2c8-4ba0-b195-18f269fdba58]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="IndIsSeeded" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLangTrans" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndReplNl" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[3]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[104]]></Field>
	<Field name="LangName" type="java.lang.String"><![CDATA[PYTHON]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2020-04-17 21:01:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="Name" type="java.lang.String"><![CDATA[SparkHiveStoreCmdStreaming]]></Field>
	<Field name="TechnoName" type="java.lang.String"><![CDATA[SPARK_PYTHON]]></Field>
	<Field name="TemplateText" type="java.lang.String"><![CDATA[
def getSqlContextInstance(sparkContext):
  if ('sqlContextSingletonInstance' not in globals()):
     if sparkVersionNum(sparkContext.version) > 200:
       globals()['sqlContextSingletonInstance'] = SparkSession.builder.config(conf = sparkContext.getConf()).enableHiveSupport().getOrCreate()
     else:
       globals()['sqlContextSingletonInstance'] = HiveContext(sparkContext)
  return globals()['sqlContextSingletonInstance']

def getDf( rdd ):
  sqlctx = getSqlContextInstance(rdd.context)
  {# IF ($[DF_INFER_SCHEMA] == 'false') #}
  schema = StructType([{# FOR ($[TGT_SCHEMA_TYPES]) IN ($[TGT_SCHEMA_TYPE]) SEP = ',
  ' #}
    StructField($[TGT_SCHEMA_TYPE], True) {# ENDFOR #}])
  df = sqlctx.createDataFrame(rdd, schema)
  {# ELSE #}
  rdd = rdd.map(lambda row : Row(**row) if isinstance(row,dict) else row)
  {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
  for line in rdd.collect() :
      print line
  {# ENDIF #}
  {# IF ($[DF_SAMPLING_RATIO] == '0') #}
  df = sqlctx.createDataFrame(rdd)
  {# ELSE #}
  df = sqlctx.createDataFrame(rdd, None, $[DF_SAMPLING_RATIO] )
  {# ENDIF #}
  {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
  print("========= %s =========" % type(df).__name__)
  df.show()
  df.printSchema()
  {# ENDIF #}
  colNames = [{# FOR ($[TGT_COLUMN_NAMES]) IN ($[TGT_COLUMN_NAME]) SEP = ','#}'$[TGT_COLUMN_NAME]'{# ENDFOR #}]
  df = df.select(*colNames)
  {# ENDIF #}
  return df

def process(time, rdd):
  print("========= %s, %s =========" % (type(rdd).__name__, str(time)))

  try:
        rowRdd = rdd
        if rowRdd.isEmpty():
            print("No rows")
            return
        print("Some rows")
        {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
        for line in rowRdd.collect() :
          print line
        {# ENDIF #}
        df = getDf(rowRdd)
        print("========= %s =========" % type(df).__name__)
        {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
        df.show()
        df.printSchema()
        {# ENDIF #}

        target_table = '$[SQL_TARGET_TABLE_NAME]'
        save_mode = '{# IF ($[OVERWRITE_TARGET_TABLE] == 'true') #}overwrite{# ELSE #}append{# ENDIF #}'

        {# IF ($[IS_TARGET_PARTITIONED] == 'true') #}
        sqlctx = getSqlContextInstance(rdd.context)
        if sparkVersionNum(rdd.context.version) > 200:
          sqlctx.conf.set("hive.exec.dynamic.partition", "true")
          sqlctx.conf.set("hive.exec.dynamic.partition.mode", "nonstrict")
          colNames = [{# FOR ($[NON_PARTITION_COLUMNS]) IN ($[NON_PARTITION_COLUMN]) SEP = ','#} '$[NON_PARTITION_COLUMN]' {# ENDFOR #},{# FOR ($[PARTITION_COLUMNS]) IN ($[PARTITION_COLUMN]) SEP = ','#} '$[PARTITION_COLUMN]' {# ENDFOR #}]
          df = df.select(*colNames)
          {# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
          df.show()
          df.printSchema()
          {# ENDIF #}
          df.write.mode(save_mode).insertInto(target_table)
        else:
          sqlctx.setConf("hive.exec.dynamic.partition", "true")
          sqlctx.setConf("hive.exec.dynamic.partition.mode", "nonstrict")
          df.write.mode(save_mode).partitionBy({# FOR ($[PARTITION_COLUMNS]) IN ($[PARTITION_COLUMN]) SEP = ', '#}'$[PARTITION_COLUMN]'{# ENDFOR #}).saveAsTable(target_table)
        {# ELSE #}
        df.write.mode(save_mode).saveAsTable(target_table)
        {# ENDIF #}

  except:
        raise

$[SRC_ALIAS].foreachRDD(process)

    ]]></Field>
	<Field name="TemplateVersion" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[4b79f10e-0093-4e63-9f7f-a00552dfa432]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[103]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[104]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.103]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46e1b8-2d00-11e6-9403-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkHiveStoreCmd]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[17]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.104]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[5ef0f860-f2c8-4ba0-b195-18f269fdba58]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkHiveStoreCmdStreaming]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[26]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.09]]></Field>
</Object>
</SunopsisExport>
