<?xml version="1.0" encoding="ISO-8859-1"?>
<SunopsisExport>
<Admin RepositoryVersion="05.02.02.09" OdiVersion="12.2.1" IsLegacyIdCompatible="false" IsExportWithParents="true" />
<Encryption algorithm="AES" keyLength="128" exportKeyHash="AX+btFvQ/VcM6W/iHKAa3Je3SlodRwKKyEFwnQDczQU=" keyVect="N5JqyI9u1BP/GyNaGu/Utw==" exportKeySalt="49d838ca-ac12-4294-829f-ff712038fc6a" containsCipherText="false"/>
<SmartExportList materializeShortcut="false" >
   <Include><![CDATA[SnpKmTemplate#118]]></Include>
</SmartExportList>
<Object class="com.sunopsis.dwg.dbobj.SnpKmTemplate">
		<Field name="FirstDate" type="java.sql.Timestamp"><![CDATA[2020-04-17 19:45:20.0]]></Field>
	<Field name="FirstUser" type="java.lang.String"><![CDATA[SUNOPSIS_INSTALL]]></Field>
	<Field name="GlobalId" type="java.lang.String"><![CDATA[fa46ecd0-2d00-11e6-942e-00163e1ffd72]]></Field>
	<Field name="IndChange" type="java.lang.String"><![CDATA[I]]></Field>
	<Field name="IndIsSeeded" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndLangTrans" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IndReplNl" type="java.lang.String"><![CDATA[1]]></Field>
	<Field name="IntVersion" type="com.sunopsis.sql.DbInt"><![CDATA[3]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[118]]></Field>
	<Field name="LangName" type="java.lang.String"><![CDATA[PYTHON]]></Field>
	<Field name="LastDate" type="java.sql.Timestamp"><![CDATA[2020-04-17 21:01:11.0]]></Field>
	<Field name="LastUser" type="java.lang.String"><![CDATA[SUPERVISOR]]></Field>
	<Field name="Name" type="java.lang.String"><![CDATA[SparkLookupCmdStreaming]]></Field>
	<Field name="TechnoName" type="java.lang.String"><![CDATA[SPARK_PYTHON]]></Field>
	<Field name="TemplateText" type="java.lang.String"><![CDATA[
{# IF ($[NO_MATCH] == 'DEFAULT_VALUES') #}
def defaultValue$[LOOKUP_POSTFIX]($[LOOKUP_RDD_SHAPE]): return $[DEFAULT_VALUE_CREATION]
{# ENDIF #}
def prepareLookupSource(rdd):
{# IF ($[SIMPLE_EQUL_LOOKUP] == 'true') #}
  rdd = rdd.keyBy(lambda $[LOOKUP_RDD_SHAPE]: $[LOOKUP_KEY])
{# ENDIF #}
{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
  print("========= %s   : rdd =========" % type(rdd).__name__)
  for line in rdd.collect():
    print line
{# ENDIF #}
  return {# IF ($[IS_MAP_SIDE] == 'true') #}rdd{# IF ($[SIMPLE_EQUL_LOOKUP] == 'true') #}.groupByKey().collectAsMap(){# ELSE #}.collect(){# ENDIF #}{# ELSE #}rdd{# ENDIF #}
lookupSource$[LOOKUP_POSTFIX] = prepareLookupSource($[LOOKUP_ALIAS])
{# IF ($[IS_MAP_SIDE] == 'true') #}
lookupVariable$[LOOKUP_POSTFIX] = sc.broadcast(lookupSource$[LOOKUP_POSTFIX])
def transformFunc$[LOOKUP_POSTFIX](t, rddOfDriverStream):
{# IF ($[CACHE_BASED_ON_KEYS] == 'true' )#}
  lookupVariable$[LOOKUP_POSTFIX] = getFromAndRefreshCache(rddOfDriverStream, prepareLookupSource)
{# ENDIF #}
  lookupDriverWithKey = {# IF ($[SIMPLE_EQUL_LOOKUP] == 'true') #}rddOfDriverStream.keyBy(lambda $[DRIVER_RDD_SHAPE]: $[DRIVER_KEY]) {# ELSE #} rddOfDriverStream {# ENDIF #}
  def joinFunc$[LOOKUP_POSTFIX](iterator):
    lookupSourceDataSet = lookupVariable$[LOOKUP_POSTFIX].value
    for elem in iterator:
{# IF ($[SIMPLE_EQUL_LOOKUP] == 'true') #}
{# IF ($[NO_MATCH] == 'NO_ROW') #}
	yield (elem[1], lookupSourceDataSet.get(elem[0]).data if  lookupSourceDataSet.has_key(elem[0]) else [])
{# ELSE #}
      yield (elem[1], lookupSourceDataSet.get(elem[0]).data if  lookupSourceDataSet.has_key(elem[0]) else [defaultValue$[LOOKUP_POSTFIX](elem[1])])
{# ENDIF #}
{# ELSE #}
      $[DRIVER_RDD_SHAPE] = elem
      matchedLines = filter(lambda $[LOOKUP_ALIAS] : safeExpr(lambda : $[LOOKUP_COND] , False), lookupSourceDataSet)
{# IF ($[NO_MATCH] == 'NO_ROW') #}
      yield (elem, matchedLines if len(matchedLines) > 0 else [])
{# ELSE #}
      yield (elem, matchedLines if len(matchedLines) > 0 else [defaultValue$[LOOKUP_POSTFIX](elem)])
{# ENDIF #}
{# ENDIF #}
  lookupResult = lookupDriverWithKey.mapPartitions(joinFunc$[LOOKUP_POSTFIX]){# IF ($[NTHROW] == '-1') #}.flatMapValues(lambda l : l){# ENDIF #}
{# ELSE #}
{# IF ($[CACHE_MODE] == 'NO_RELOAD') #}
lookupSource$[LOOKUP_POSTFIX].cache()
{# ELSIF ($[CACHE_MODE] == 'RELOAD_BASED_ON_TIME' )#}
lastRefreshTime = time.time()
{# ENDIF #}
def transformFunc$[LOOKUP_POSTFIX](t, rddOfDriverStream):
{# IF ($[CACHE_MODE] == 'RELOAD_EVERY_BATCH') #}
  if lookupSource$[LOOKUP_POSTFIX].is_cached : lookupSource$[LOOKUP_POSTFIX].unpersist()
{# ELSIF ($[CACHE_MODE] == 'RELOAD_BASED_ON_TIME') #}
  global lastRefreshTime
  if (time.time()- lastRefreshTime > $[CACHE_RELOAD_INTERVAL] ):
	if lookupSource$[LOOKUP_POSTFIX].is_cached : lookupSource$[LOOKUP_POSTFIX].unpersist()
	lastRefreshTime = time.time()
{# ENDIF #}
{# IF ($[CACHE_BASED_ON_KEYS] == 'true' )#}
  lookupSource$[LOOKUP_POSTFIX] = getFromAndRefreshCache(rddOfDriverStream, prepareLookupSource)
{# ENDIF #}
  lookupDriverWithKey = {# IF ($[SIMPLE_EQUL_LOOKUP] == 'true') #}rddOfDriverStream.keyBy(lambda $[DRIVER_RDD_SHAPE]: $[DRIVER_KEY]) {# ELSE #} rddOfDriverStream {# ENDIF #}
{# IF ($[SIMPLE_EQUL_LOOKUP] == 'true') #}
{# IF ($[NO_MATCH] == 'NO_ROW') #}
  lookupResult = lookupDriverWithKey.join(lookupSource$[LOOKUP_POSTFIX]{# IF ($[LEVEL_PARALLELISM] > '0') #}, $[LEVEL_PARALLELISM]{# ENDIF #}).mapValues(lambda line: (line[0],line[1])).map(lambda line: line[1])
{# ELSE #}
  leftOuterJoinResult = lookupDriverWithKey.leftOuterJoin(lookupSource$[LOOKUP_POSTFIX]{# IF ($[LEVEL_PARALLELISM] > '0') #}, $[LEVEL_PARALLELISM]{# ENDIF #}).mapValues(lambda line: (line[0],line[1])).map(lambda line: line[1])
  lookupResult = leftOuterJoinResult.map(lambda (d, l) : (d, l) if l != None else (d, defaultValue$[LOOKUP_POSTFIX](d)))
{# ENDIF #}
{# ELSE #}
  cartesianResult = lookupDriverWithKey.cartesian(lookupSource$[LOOKUP_POSTFIX])
  leftOuterJoinResult = cartesianResult.filter(lambda ($[DRIVER_RDD_SHAPE],$[LOOKUP_RDD_SHAPE]): safeExpr(lambda : $[LOOKUP_COND], False))
{# IF ($[NO_MATCH] == 'NO_ROW') #}
  lookupResult = leftOuterJoinResult
{# ELSE #}
  subtrahend = leftOuterJoinResult.map(lambda line:line[0])
  defaultResult = rddOfDriverStream.subtract(subtrahend).map(lambda line:(line, defaultValue$[LOOKUP_POSTFIX](line)))
  lookupResult = leftOuterJoinResult.union(defaultResult)
{# ENDIF #}
{# ENDIF #}
{# ENDIF #}
{# IF ($[NTHROW] != '-1') #}
{# IF ($[IS_MAP_SIDE] == 'false') #}
  lookupResult = lookupResult.groupByKey().map(lambda (l, v) : (l, list(v)))
{# IF ($[ERROR_WHEN_MULTIPLE_ROW] == 'true') #}
  def checkMultipleRows (v) :
    if len(v) > 1 :
      raise Exception('ODIKM-SPARK-LOOKUP-10000 : Multiple match rows fetched for one of the lookup keys. This exception is triggered because of your lookup component setting for Multiple Match Rows property as "Error : multiple rows will cause a mapping failure".')
    return v;
  lookupResult = lookupResult.map(lambda (l, v) : (l, checkMultipleRows(v)))
{# ENDIF #}
{# IF ($[ANY_ROW] == 'false') #}
  def sortMultipleRows$[LOOKUP_POSTFIX] (lst) :
    {# FOR ($[LOOKUP_RDD_SHAPES],$[ORDERBY_EXPRS],$[ORDERBY_TYPES_MAP_SIDE]) IN ($[LOOKUP_RDD_SHAPE_ONE],$[ORDERBY_EXPR],$[ORDERBY_TYPE]) SEP = '
  ' #}lst = sorted(lst, key=lambda $[LOOKUP_RDD_SHAPE_ONE]:safeExpr(lambda:$[ORDERBY_EXPR],None), reverse=$[ORDERBY_TYPE]){# ENDFOR #}
    return lst
  lookupResult = lookupResult.map(lambda (l, v) : (l, sortMultipleRows$[LOOKUP_POSTFIX](v) if len(v)>1 else v))
{# IF ($[SPARK_STREAMING_DEBUG] == 'true') #}
  print "========== lookupResult after sort ====================================="
  for line in lookupResult.collect() :
    print "=========="
    print line[0]
    print "=========="
    for line_detail in line[1] :
      print line_detail
{# ENDIF #}
{# ENDIF #}
{# IF ($[RETURN_DEFAULT_IF_NTH_MISSING] == 'true') #}
  rddOfDriverStream = lookupResult.map(lambda (l, v) : (l, defaultValue$[LOOKUP_POSTFIX](l)) if len(v)==0 else {# IF ($[NTHROW] == '0') #}(l,v[len(v)-1]){# ELSE #}(l,v[$[NTHROW]-1]) if len(v)>=$[NTHROW] else (l, defaultValue$[LOOKUP_POSTFIX](l)){# ENDIF #})
{# ELSE #}
  rddOfDriverStream = lookupResult.map(lambda (l, v) : (l, defaultValue$[LOOKUP_POSTFIX](l)) if len(v)==0 else (l,v[0]) if len(v)==1 else {# IF ($[NTHROW] == '0') #}(l,v[len(v)-1]){# ELSE #}(l,v[$[NTHROW]-1]) if len(v)>=$[NTHROW] else (l, defaultValue$[LOOKUP_POSTFIX](l)){# ENDIF #})
{# ENDIF #}
{# ELSE #}
{# IF ($[ERROR_WHEN_MULTIPLE_ROW] == 'true') #}
  def checkMultipleRows (v) :
    if len(v) > 1 :
      raise Exception('ODIKM-SPARK-LOOKUP-10000 : Multiple match rows fetched for one of the lookup keys. This exception is triggered because of your lookup component setting for Multiple Match Rows property as "Error : multiple rows will cause a mapping failure".')
    return v;
  lookupResult = lookupResult.map(lambda (l, v) : (l, checkMultipleRows(v)))
{# ENDIF #}
{# IF ($[ANY_ROW] == 'false') #}
  def sortMultipleRows$[LOOKUP_POSTFIX] (lst) :
    {# FOR ($[LOOKUP_RDD_SHAPES],$[ORDERBY_EXPRS],$[ORDERBY_TYPES_MAP_SIDE]) IN ($[LOOKUP_RDD_SHAPE_ONE],$[ORDERBY_EXPR],$[ORDERBY_TYPE]) SEP = '
    ' #}lst = sorted(lst, key=lambda $[LOOKUP_RDD_SHAPE_ONE]:safeExpr(lambda:$[ORDERBY_EXPR],None), reverse=$[ORDERBY_TYPE]){# ENDFOR #}
    return lst
  lookupResult = lookupResult.map(lambda (l, v) : (l, sortMultipleRows$[LOOKUP_POSTFIX](v) if len(v)> 1 else v))
{# ENDIF #}
{# IF ($[RETURN_DEFAULT_IF_NTH_MISSING] == 'true') #}
  rddOfDriverStream = lookupResult.map(lambda (l, v) : (l, defaultValue$[LOOKUP_POSTFIX](l)) if len(v)==0 else {# IF ($[NTHROW] == '0') #}(l,v[len(v)-1]){# ELSE #}(l,v[$[NTHROW]-1]) if len(v)>=$[NTHROW] else (l, defaultValue$[LOOKUP_POSTFIX](l)){# ENDIF #})
{# ELSE #}
  rddOfDriverStream = lookupResult.map(lambda (l, v) : (l, defaultValue$[LOOKUP_POSTFIX](l)) if len(v)==0 else (l,v[0]) if len(v)==1 else {# IF ($[NTHROW] == '0') #}(l,v[len(v)-1]){# ELSE #}(l,v[$[NTHROW]-1]) if len(v)>=$[NTHROW] else (l, defaultValue$[LOOKUP_POSTFIX](l)){# ENDIF #})
{# ENDIF #}
{# ENDIF #}
{# ELSE #}
  rddOfDriverStream = lookupResult
{# ENDIF #}
  return rddOfDriverStream
$[TGT_ALIAS] = $[DRIVER_ALIAS].transform(transformFunc$[LOOKUP_POSTFIX])
]]></Field>
	<Field name="TemplateVersion" type="java.lang.String">null</Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpTemplateJoin">
		<Field name="GlobalId" type="java.lang.String"><![CDATA[4b3f6624-3482-43dc-8d23-d38eb82b33da]]></Field>
	<Field name="IKmTemplate" type="com.sunopsis.sql.DbInt"><![CDATA[117]]></Field>
	<Field name="IKmTemplateRef" type="com.sunopsis.sql.DbInt"><![CDATA[118]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.117]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46ec9e-2d00-11e6-942d-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkLookupCmd]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[14]]></Field>
</Object>
<Object class="com.sunopsis.dwg.dbobj.SnpFKXRef">
		<Field name="RefKey" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE.118]]></Field>
	<Field name="RefObjGlobalId" type="java.lang.String"><![CDATA[fa46ecd0-2d00-11e6-942e-00163e1ffd72]]></Field>
 <Field name="RefObjFQName" type="java.lang.String"><![CDATA[SparkLookupCmdStreaming]]></Field>
 <Field name="RefObjFQType" type="java.lang.String"><![CDATA[SNP_KMTEMPLATE]]></Field>
 <Field name="RefObjFQNameLengths" type="java.lang.String"><![CDATA[23]]></Field>
</Object>
<Object class="com.sunopsis.dwg.DwgExportSummary">
		<Field name="ExpTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="InstObjNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="JoinNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyColNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="KeyNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="LinkDiagNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MorigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="MtxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OrigTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OtherObjectsNb" type="com.sunopsis.sql.DbInt"><![CDATA[2]]></Field>
	<Field name="PlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="StepNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="TxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeOrigNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="UeUsedNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="VarPlanAgentNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="ScenTxtNb" type="com.sunopsis.sql.DbInt"><![CDATA[0]]></Field>
	<Field name="OdiVersion" type="java.lang.String"><![CDATA[12.2.1]]></Field>
	<Field name="OriginRepositoryID" type="com.sunopsis.sql.DbInt"><![CDATA[1]]></Field>
	<Field name="RepositoryVersion" type="java.lang.String"><![CDATA[05.02.02.09]]></Field>
</Object>
</SunopsisExport>
